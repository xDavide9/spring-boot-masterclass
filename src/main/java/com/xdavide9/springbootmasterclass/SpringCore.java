package com.xdavide9.springbootmasterclass;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

import java.util.Arrays;

// the spring framework is composed of many modules, like core spring, spring boot, spring data, spring security, spring web...
// nowadays spring boot is used every spring-based application because it provides autoconfiguration and depending on the project other spring modules might be used

// this annotation includes all the autoconfiguration spring boot is famous for
// the motto is convention over configuration which means that the framework is already configured in most of its applications
// (starter dependencies and their autoconfiguration) and only if you have specific requirements you should change this configuration
@SpringBootApplication
public class SpringCore {

    // now discuss some of the core concepts of the spring framework and implement them via spring boot
    // a bean is an object within the spring framework
    // beans are managed entirely by the IoC container (like BeanFactory or ApplicationContext)
    // IoC stands for inversion of control, which means that the programmer does not need to worry about the relationships
    // between objects (beans) anymore because the IoC container manages them
    // an example of IoC is dependency injection which is a way to provide the dependencies for an object
    // this can happen via constructor, setter, or field injection

    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(SpringCore.class, args);
        Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);
        System.out.println("Number of beans: " + context.getBeanDefinitionCount()); // ~160 beans configured by default
    }

    // creating a bean with @Bean, there are many different ways to create beans, but mostly it's just @Bean
    // and other Java annotations like @Component and its specializations like @Service, @Repository, @Controller (class level)
    @Bean(name = "StringBean")  // the name can also be autogenerated by the method name
    @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)         // beans are generally singleton (only one per IoC Container)
    // but they could also be of scope prototype (new instance every time) or global, request for web servers
    public String someBean() {
        return "Just a String bean";
    }

    @Bean
    public String anotherBean() {
        return "Just another String bean";
    }

    @Bean
    @Autowired // not required anymore because auto-wiring is done by default
    public CommandLineRunner commandLineRunner(@Qualifier("StringBean") String value) { // example of dependency injection
        // which is an implementation of Inversion of Control
        // removing qualifier would fail because there are multiple beans of type String
        return args -> {
            System.out.println(value);
        };
    }

    @Service  // creating a bean with @Service, which is a specialization of @Component
    public class SomeService {
        public void doSomething() {
            System.out.println("Doing something");
        }

        // bean lifecycle hooks allow you to do something right after the bean is created
        @PostConstruct
        public void init() {
            System.out.println("setup");
        }

        // or right before the bean is destroyed
        @PreDestroy
        public void die() {
            System.out.println("teardown");
        }
    }
}
